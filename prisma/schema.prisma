// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model USER {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(50)
  email        String     @unique @db.VarChar(320)
  phone_number String     @unique @db.VarChar(20)
  password     String     @db.VarChar(100)
  role         USER_ROLE
  user_code    String     @db.VarChar(50)
  createdAt    DateTime   @default(now())
  COMPANY      COMPANY    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id   Int
  CONTRACT     CONTRACT[]
}

model CUSTOMER {
  id             Int        @id @default(autoincrement())
  name           String     @db.VarChar(50)
  email          String     @unique @db.VarChar(320)
  gender         String     @db.VarChar(50)
  phone_number   String     @unique @db.VarChar(20)
  age_group      Int?       @db.Integer
  region         String?    @db.VarChar(50)
  contract_count Int        @default(0) @db.Integer
  memo           String?
  created_at     DateTime   @default(now())
  COMPANY        COMPANY    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id     Int
  CONTRACT       CONTRACT[]
}

model CAR {
  id                 Int        @id @default(autoincrement())
  car_number         String     @unique @db.VarChar(50)
  manufactuuing_year Int        @db.Integer
  mileage            Int        @db.Integer
  price              Decimal    @db.Decimal(20, 2)
  status             CAR_STATUS @default(AVAILABLE)
  accident_count     Int        @default(0) @db.Integer
  content            String?
  accident_detail    String?
  Datetime           DateTime   @default(now())
  COMPANY            COMPANY    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id         Int
  CARMODEL           CARMODEL   @relation(fields: [car_model_id], references: [id], onDelete: Restrict)
  car_model_id       Int
  CONTRACT           CONTRACT[]
}

model CONTRACT {
  id               Int                @id @default(autoincrement())
  status           CONTRACT_STATUS
  finalized_at     DateTime?
  created_at       DateTime           @default(now())
  CUSTOMER         CUSTOMER           @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  customer_id      Int
  CAR              CAR                @relation(fields: [car_id], references: [id], onDelete: Cascade)
  car_id           Int
  USER             USER               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          Int
  CONTRACTDOCUMENT CONTRACTDOCUMENT[]
  MEETING          MEETING[]
}

model CONTRACTDOCUMENT {
  id          Int      @id @default(autoincrement())
  file_name   String   @db.VarChar(50)
  file_path   String   @db.VarChar(255)
  file_size   Int?     @db.Integer
  CONTRACT    CONTRACT @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  contract_id Int
}

model MANUFACTURER {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(50)
  CARMODEL CARMODEL[]
}

model CARTYPE {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(50)
  CARMODEL CARMODEL[]
}

model CARMODEL {
  id              Int          @id @default(autoincrement())
  name            String       @db.VarChar(50)
  MANUFACTURER    MANUFACTURER @relation(fields: [manufacturer_id], references: [id], onDelete: Restrict)
  manufacturer_id Int
  CARTYPE         CARTYPE      @relation(fields: [car_type_id], references: [id], onDelete: Restrict)
  car_type_id     Int
  CAR             CAR[]
}

model MEETING {
  id          Int      @id @default(autoincrement())
  time        DateTime
  CONTRACT    CONTRACT @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  contract_id Int
}

model COMPANY {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(50)
  code     String     @unique @db.VarChar(50)
  USER     USER[]
  CAR      CAR[]
  CUSTOMER CUSTOMER[]
}

enum CONTRACT_STATUS {
  VEHICLE_CHECKING
  PRICE_CHECKING
  CONTRACT_PREPARING
  CONTRACT_SUCCESS
  CONTRACT_FAILED
}

enum CAR_STATUS {
  AVAILABLE
  PENDING
  SOLD
}

enum USER_ROLE {
  ADMIN
  OWNER
  EMPLOYEE
}
